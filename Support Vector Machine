{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"XeCo6hlZlyeu","outputId":"7bae30fc-aed9-49ac-df08-2ac896315a0e"},"outputs":[{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","[nltk_data] Downloading package averaged_perceptron_tagger to\n","[nltk_data]     /root/nltk_data...\n","[nltk_data]   Unzipping taggers/averaged_perceptron_tagger.zip.\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import os\n","import re\n","import matplotlib.pyplot as plt\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.metrics import accuracy_score, classification_report\n","import nltk\n","\n","nltk.download('punkt')\n","nltk.download('stopwords')\n","nltk.download('averaged_perceptron_tagger')\n","\n","# Load the dataset\n","data_1 = pd.read_json(\"/content/drive/MyDrive/testdata/Sarcasm_Headlines_Dataset.json\", lines=True)\n","data_2 = pd.read_json(\"/content/drive/MyDrive/testdata/Sarcasm_Headlines_Dataset_v2.json\", lines=True)\n","data = pd.concat([data_1, data_2])\n","\n","# Clean the text\n","def clean_text(text):\n","    text = text.lower()\n","\n","    pattern = re.compile('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n","    text = pattern.sub('', text)\n","    text = \" \".join(filter(lambda x: x[0] != '@', text.split()))\n","\n","    emoji = re.compile(\"[\"\n","                       u\"\\U0001F600-\\U0001FFFF\"  # emoticons\n","                       u\"\\U0001F300-\\U0001F5FF\"  # symbols & pictographs\n","                       u\"\\U0001F680-\\U0001F6FF\"  # transport & map symbols\n","                       u\"\\U0001F1E0-\\U0001F1FF\"  # flags (iOS)\n","                       u\"\\U00002702-\\U000027B0\"\n","                       u\"\\U000024C2-\\U0001F251\"\n","                       \"]+\", flags=re.UNICODE)\n","    text = emoji.sub(r'', text)\n","    text = text.lower()\n","    text = re.sub(r\"i'm\", \"i am\", text)\n","    text = re.sub(r\"he's\", \"he is\", text)\n","    text = re.sub(r\"she's\", \"she is\", text)\n","    text = re.sub(r\"that's\", \"that is\", text)\n","    text = re.sub(r\"what's\", \"what is\", text)\n","    text = re.sub(r\"where's\", \"where is\", text)\n","    text = re.sub(r\"\\'ll\", \" will\", text)\n","    text = re.sub(r\"\\'ve\", \" have\", text)\n","    text = re.sub(r\"\\'re\", \" are\", text)\n","    text = re.sub(r\"\\'d\", \" would\", text)\n","    text = re.sub(r\"\\'ve\", \" have\", text)\n","    text = re.sub(r\"won't\", \"will not\", text)\n","    text = re.sub(r\"don't\", \"do not\", text)\n","    text = re.sub(r\"did't\", \"did not\", text)\n","    text = re.sub(r\"can't\", \"can not\", text)\n","    text = re.sub(r\"it's\", \"it is\", text)\n","    text = re.sub(r\"couldn't\", \"could not\", text)\n","    text = re.sub(r\"have't\", \"have not\", text)\n","    text = re.sub(r\"[,.\\\"\\'!@#$%^&*(){}?/;`~:<>+=-]\", \"\", text)\n","    return text\n","\n","data[\"headline\"] = data[\"headline\"].apply(clean_text)\n","\n","# Tokenize the headlines\n","def tokenize_headlines(df):\n","    headlines = df[\"headline\"].values.tolist()\n","    tokenized_headlines = [nltk.word_tokenize(headline) for headline in headlines]\n","    return tokenized_headlines\n","\n","headlines = tokenize_headlines(data)\n","\n","# Initialize the TF-IDF vectorizer\n","vectorizer = TfidfVectorizer(max_features=5000)\n","\n","# Convert headlines to TF-IDF features\n","X = vectorizer.fit_transform([\" \".join(headline) for headline in headlines]).toarray()\n","\n","# Split the data into train and test sets\n","validation_split = 0.3\n","num_validation_samples = int(validation_split * X.shape[0])\n","indices = np.arange(X.shape[0])\n","np.random.shuffle(indices)\n","X = X[indices]\n","y = data['is_sarcastic'].values[indices]\n","X_train = X[:-num_validation_samples]\n","y_train = y[:-num_validation_samples]\n","X_test = X[-num_validation_samples:]\n","y_test = y[-num_validation_samples:]\n","\n","from sklearn.svm import SVC\n","from sklearn.metrics import accuracy_score\n","\n","# Convert the data to feature vectors\n","X_train = X_train.reshape(X_train.shape[0], -1)\n","X_test = X_test.reshape(X_test.shape[0], -1)\n","\n","# Create an SVM classifier\n","svm_classifier = SVC(kernel='linear')\n","\n","# Train the SVM classifier\n","svm_classifier.fit(X_train, y_train)\n","\n","# Predict the labels for the test set\n","y_pred = svm_classifier.predict(X_test)\n","\n","# Calculate the accuracy of the model\n","accuracy = accuracy_score(y_test, y_pred)\n","print('Accuracy:', accuracy)\n","\n","classification_report = classification_report(y_test, y_pred)\n","print(\"classification_report\")\n","print(classification_report)\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"aA5fPBv-cYDt","outputId":"6f1dc491-1b52-4067-996f-2b50361cabc7"},"outputs":[{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAqsAAAIjCAYAAAAk+FJEAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAwTElEQVR4nO3debyWc+L/8fdpcUpaUCSjEiN8UbahQWlkG3tjG2NUxljGNrIzRmXJliWGjLWxzDC2MZivQWPfsmTfQhiiRNGezvn90a/znTOJojofej4fjx4P9+f63Nf1ue4Hx6vrvu77VFRXV1cHAAAKVK+uFwAAAHMjVgEAKJZYBQCgWGIVAIBiiVUAAIolVgEAKJZYBQCgWGIVAIBiiVUAAIolVgG+xBtvvJGtttoqzZs3T0VFRW677bYFuv9Ro0aloqIiV1999QLd73fZ5ptvns0337yulwEURqwCxXrzzTdzwAEHpEOHDmnUqFGaNWuWTTbZJBdccEGmTJmyUI/dq1evvPDCCznttNNyzTXXZIMNNliox1uUevfunYqKijRr1uxLX8c33ngjFRUVqaioyDnnnDPf+//ggw/Sr1+/jBgxYgGsFljcNajrBQB8mTvvvDO77bZbKisrs88++2SttdbK9OnT8/DDD+foo4/OSy+9lD/+8Y8L5dhTpkzJY489lhNPPDGHHHLIQjlGu3btMmXKlDRs2HCh7P/rNGjQIJMnT87f//737L777rW2XXfddWnUqFGmTp36jfb9wQcfpH///mnfvn06d+48z8/75z//+Y2OB3y/iVWgOG+//Xb23HPPtGvXLsOGDcsKK6xQs+3ggw/OyJEjc+eddy60448dOzZJ0qJFi4V2jIqKijRq1Gih7f/rVFZWZpNNNsmf//znOWL1+uuvz3bbbZebb755kaxl8uTJWXLJJbPEEksskuMB3y1uAwCKc9ZZZ2XixIm54ooraoXqbKuuumoOP/zwmsdffPFFTjnllKyyyiqprKxM+/btc8IJJ2TatGm1nte+fftsv/32efjhh/OjH/0ojRo1SocOHfKnP/2pZk6/fv3Srl27JMnRRx+dioqKtG/fPsmst89n//N/6tevXyoqKmqN3XPPPdl0003TokWLLLXUUunYsWNOOOGEmu1zu2d12LBh2WyzzdKkSZO0aNEiO+20U1555ZUvPd7IkSPTu3fvtGjRIs2bN0+fPn0yefLkub+w/2WvvfbKP/7xj4wfP75mbPjw4XnjjTey1157zTH/k08+yVFHHZW11147Sy21VJo1a5Ztt902zz33XM2c+++/PxtuuGGSpE+fPjW3E8w+z8033zxrrbVWnn766XTt2jVLLrlkzevy3/es9urVK40aNZrj/LfeeussvfTS+eCDD+b5XIHvLrEKFOfvf/97OnTokB//+MfzNH+//fbL73//+6y33no577zz0q1btwwcODB77rnnHHNHjhyZXXfdNVtuuWUGDRqUpZdeOr17985LL72UJOnZs2fOO++8JMnPf/7zXHPNNTn//PPna/0vvfRStt9++0ybNi0DBgzIoEGDsuOOO+aRRx75yufde++92XrrrTNmzJj069cvffv2zaOPPppNNtkko0aNmmP+7rvvns8//zwDBw7M7rvvnquvvjr9+/ef53X27NkzFRUVueWWW2rGrr/++qy++upZb7315pj/1ltv5bbbbsv222+fc889N0cffXReeOGFdOvWrSYc11hjjQwYMCBJsv/+++eaa67JNddck65du9bsZ9y4cdl2223TuXPnnH/++enevfuXru+CCy5Iq1at0qtXr8ycOTNJcumll+af//xnLrzwwrRp02aezxX4DqsGKMiECROqk1TvtNNO8zR/xIgR1Umq99tvv1rjRx11VHWS6mHDhtWMtWvXrjpJ9YMPPlgzNmbMmOrKysrqI488smbs7bffrk5SffbZZ9faZ69evarbtWs3xxpOPvnk6v/8cXreeedVJ6keO3bsXNc9+xhXXXVVzVjnzp2rl1tuuepx48bVjD333HPV9erVq95nn33mON6+++5ba5+77LJL9bLLLjvXY/7neTRp0qS6urq6etddd63eYostqqurq6tnzpxZ3bp16+r+/ft/6WswderU6pkzZ85xHpWVldUDBgyoGRs+fPgc5zZbt27dqpNUDxky5Eu3devWrdbY3XffXZ2k+tRTT61+6623qpdaaqnqnXfe+WvPEfj+cGUVKMpnn32WJGnatOk8zb/rrruSJH379q01fuSRRybJHPe2rrnmmtlss81qHrdq1SodO3bMW2+99Y3X/N9m3+v6t7/9LVVVVfP0nNGjR2fEiBHp3bt3lllmmZrxddZZJ1tuuWXNef6nAw88sNbjzTbbLOPGjat5DefFXnvtlfvvvz8ffvhhhg0blg8//PBLbwFIZt3nWq/erP9tzJw5M+PGjau5xeGZZ56Z52NWVlamT58+8zR3q622ygEHHJABAwakZ8+eadSoUS699NJ5Phbw3SdWgaI0a9YsSfL555/P0/x33nkn9erVy6qrrlprvHXr1mnRokXeeeedWuNt27adYx9LL710Pv3002+44jntscce2WSTTbLffvtl+eWXz5577pkbb7zxK8N19jo7duw4x7Y11lgjH3/8cSZNmlRr/L/PZemll06S+TqXn/70p2natGluuOGGXHfdddlwww3neC1nq6qqynnnnZcf/vCHqaysTMuWLdOqVas8//zzmTBhwjwfc8UVV5yvD1Odc845WWaZZTJixIgMHjw4yy233Dw/F/juE6tAUZo1a5Y2bdrkxRdfnK/n/fcHnOamfv36XzpeXV39jY8x+37K2Ro3bpwHH3ww9957b375y1/m+eefzx577JEtt9xyjrnfxrc5l9kqKyvTs2fPDB06NLfeeutcr6omyemnn56+ffuma9euufbaa3P33Xfnnnvuyf/8z//M8xXkZNbrMz+effbZjBkzJknywgsvzNdzge8+sQoUZ/vtt8+bb76Zxx577GvntmvXLlVVVXnjjTdqjX/00UcZP358zSf7F4Sll1661ifnZ/vvq7dJUq9evWyxxRY599xz8/LLL+e0007LsGHD8q9//etL9z17na+99toc21599dW0bNkyTZo0+XYnMBd77bVXnn322Xz++edf+qG02W666aZ07949V1xxRfbcc89stdVW6dGjxxyvybz+xWFeTJo0KX369Mmaa66Z/fffP2eddVaGDx++wPYPlE+sAsU55phj0qRJk+y333756KOP5tj+5ptv5oILLkgy623sJHN8Yv/cc89Nkmy33XYLbF2rrLJKJkyYkOeff75mbPTo0bn11ltrzfvkk0/meO7sL8f/76/Tmm2FFVZI586dM3To0Frx9+KLL+af//xnzXkuDN27d88pp5ySiy66KK1bt57rvPr1689x1favf/1r3n///Vpjs6P6y8J+fh177LF59913M3To0Jx77rlp3759evXqNdfXEfj+8UsBgOKsssoquf7667PHHntkjTXWqPUbrB599NH89a9/Te/evZMknTp1Sq9evfLHP/4x48ePT7du3fLkk09m6NCh2Xnnnef6tUjfxJ577pljjz02u+yySw477LBMnjw5l1xySVZbbbVaHzAaMGBAHnzwwWy33XZp165dxowZk4svvjg/+MEPsummm851/2effXa23XbbdOnSJb/61a8yZcqUXHjhhWnevHn69eu3wM7jv9WrVy+/+93vvnbe9ttvnwEDBqRPnz758Y9/nBdeeCHXXXddOnToUGveKquskhYtWmTIkCFp2rRpmjRpko022igrr7zyfK1r2LBhufjii3PyySfXfJXWVVddlc033zwnnXRSzjrrrPnaH/Dd5MoqUKQdd9wxzz//fHbdddf87W9/y8EHH5zjjjsuo0aNyqBBgzJ48OCauZdffnn69++f4cOH57e//W2GDRuW448/Pn/5y18W6JqWXXbZ3HrrrVlyySVzzDHHZOjQoRk4cGB22GGHOdbetm3bXHnllTn44IPzhz/8IV27ds2wYcPSvHnzue6/R48e+d///d8su+yy+f3vf59zzjknG2+8cR555JH5Dr2F4YQTTsiRRx6Zu+++O4cffnieeeaZ3HnnnVlppZVqzWvYsGGGDh2a+vXr58ADD8zPf/7zPPDAA/N1rM8//zz77rtv1l133Zx44ok145tttlkOP/zwDBo0KI8//vgCOS+gbBXV83MnPgAALEKurAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADF+l7+BqvG6x5S10sAWKA+HX5RXS8BYIFqNI8V6soqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRL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AACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYolVAACKJVYBACiWWAUAoFhiFQCAYn2jWH3ooYey9957p0uXLnn//feTJNdcc00efvjhBbo4AAAWb/MdqzfffHO23nrrNG7cOM8++2ymTZuWJJkwYUJOP/30Bb5AAAAWX/Mdq6eeemqGDBmSyy67LA0bNqwZ32STTfLMM88s0MUBALB4m+9Yfe2119K1a9c5xps3b57x48cviDUBAECSbxCrrVu3zsiRI+cYf/jhh9OhQ4cFsigAAEi+Qaz++te/zuGHH54nnngiFRUV+eCDD3LdddflqKOOykEHHbQw1ggAwGKqwfw+4bjjjktVVVW22GKLTJ48OV27dk1lZWWOOuqoHHrooQtjjQAALKYqqqurq7/JE6dPn56RI0dm4sSJWXPNNbPUUkst6LV9Y43XPaSulwCwQH06/KK6XgLAAtVoHi+ZzveV1dmWWGKJrLnmmt/06QAA8LXmO1a7d++eioqKuW4fNmzYt1oQAADMNt+x2rlz51qPZ8yYkREjRuTFF19Mr169FtS6AABg/mP1vPPO+9Lxfv36ZeLEid96QQAAMNt8f3XV3Oy999658sorF9TuAADgm3/A6r899thjadSo0YLa3bcy7skL63oJAAtU+4NuquslACxQH1626zzNm+9Y7dmzZ63H1dXVGT16dJ566qmcdNJJ87s7AACYq/mO1ebNm9d6XK9evXTs2DEDBgzIVltttcAWBgAA8xWrM2fOTJ8+fbL22mtn6aWXXlhrAgCAJPP5Aav69etnq622yvjx4xfScgAA4P/M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+vnoo49qjX/00Udp3bp1Ha0KAL6fxCrMpyWWWCLrr79+7rvvvpqxqqqq3HfffenSpUsdrgwAvn8a1PUC4Luob9++6dWrVzbYYIP86Ec/yvnnn59JkyalT58+db00gPk2ceLEjBw5subx22+/nREjRmSZZZZJ27Zt63Bl4Kur4Bu76KKLcvbZZ+fDDz9M586dM3jw4Gy00UZ1vSyA+Xb//fene/fuc4z36tUrV1999aJfEPwHsQoAQLHcswoAQLHEKgAAxRKrAAAUS6wCAFAssQoAQLHEKgAAxRKrAAAUS6wCAFAssQpQmN69e2fnnXeuebz55pvnt7/97SJfx/3335+KioqMHz9+kR8bYDaxCjCPevfunYqKilRUVGSJJZbIqquumgEDBuSLL75YqMe95ZZbcsopp8zTXIEJfN80qOsFAHyXbLPNNrnqqqsybdq03HXXXTn44IPTsGHDHH/88bXmTZ8+PUssscQCOeYyyyyzQPYD8F3kyirAfKisrEzr1q3Trl27HHTQQenRo0duv/32mrfuTzvttLRp0yYdO3ZMkrz33nvZfffd06JFiyyzzDLZaaedMmrUqJr9zZw5M3379k2LFi2y7LLL5phjjkl1dXWtY/73bQDTpk3Lsccem5VWWimVlZVZddVVc8UVV2TUqFHp3r17kmTppZdORUVFevfunSSpqqrKwIEDs/LKK6dx48bp1KlTbrrpplrHueuuu7LaaqulcePG6d69e611AtQVsQrwLTRu3DjTp09Pktx333157bXXcs899+SOO+7IjBkzsvXWW6dp06Z56KGH8sgjj2SppZbKNttsU/OcQYMG5eqrr86VV16Zhx9+OJ988kluvfXWrzzmPvvskz//+c8ZPHhwXnnllVx66aVZaqmlstJKK+Xmm29Okrz22msZPXp0LrjggiTJwIED86c//SlDhgzJSy+9lCOOOCJ77713HnjggSSzorpnz57ZYYcdMmLEiOy333457rjjFtbLBjDP3AYA8A1UV1fnvvvuy913351DDz00Y8eOTZMmTXL55ZfXvP1/7bXXpqqqKpdffnkqKiqSJFdddVVatGiR+++/P1tttVXOP//8HH/88enZs2eSZMiQIbn77rvnetzXX389N954Y+6555706NEjSdKhQ4ea7bNvGVhuueXSokWLJLOuxJ5++um5995706VLl5rnPPzww7n00kvTrVu3XHLJJVlllVUyaNCgJEnHjh3zwgsv5Mwzz1yArxrA/BOrAPPhjjvuyFJLLZUZM2akqqoqe+21V/r165eDDz44a6+9dq37VJ977rmMHDkyTZs2rbWPqVOn5s0338yECRMyevTobLTRRjXbGjRokA022GCOWwFmGzFiROrXr59u3brN85pHjhyZyZMnZ8stt6w1Pn369Ky77rpJkldeeaXWOpLUhC1AXRKrAPOhe/fuueSSS7LEEkukTZs2adDg/36MNmnSpNbciRMnZv3118911103x35atWr1jY7fuHHj+X7OxIkTkyR33nlnVlxxxVrbKisrv9E6ABYVsQowH5o0aZJVV111nuaut956ueGGG7LccsulWbNmXzpnhRVWyBNPPJGuXbsmSb744os8/fTTWW+99b50/tprr52qqqo88MADNbcB/KfZV3ZnzpxZM7bmmmumsrIy77777lyvyK6xxhq5/fbba409/vjjX3+SAAuZD1gBLCS/+MUv0rJly+y000556KGH8vbbb+f+++/PYYcdln//+99JksMPPzxnnHFGbrvttrz66qv5zW9+85Xfkdq+ffv06tUr++67b2677baafd54441Jknbt2qWioiJ33HFHxo4dm4kTJ6Zp06Y56qijcsQRR2To0KF5880388wzz+TCCy/M0KFDkyQHHnhg3njjjRx99NF57bXXcv311+fqq69e2C8RwNcSqwALyZJLLpkHH3wwbdu2Tc+ePbPGGmvkV7/6VaZOnVpzpfXII4/ML3/5y/Tq1StdunRJ06ZNs8suu3zlfi+55JLsuuuu+c1vfpPVV189v/71rzNp0qQkyYorrpj+/fvnuOOOy/LLL59DDjkkSXLKKafkpJNOysCBA7PGGmtkm222yZ133pmVV145SdK2bdvcfPPNue2229KpU6cMGTIkp59++kJ8dQDmTUX13O7iBwCAOubKKgAAxRKrAAAUS6wCAFAssQoAQLHEKgAAxRKrAAAUS6wCAFAssQoAQLHEKgAAxRKrAAAUS6wCAFCs/weeUga0OWV9VwAAAABJRU5ErkJggg==\n","text/plain":["<Figure size 800x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"},{"data":{"image/png":"\n","text/plain":["<Figure size 800x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.metrics import confusion_matrix, precision_recall_curve\n","\n","# Plotting the Confusion Matrix\n","def plot_confusion_matrix(y_true, y_pred):\n","    cm = confusion_matrix(y_true, y_pred)\n","    plt.figure(figsize=(8, 6))\n","    sns.heatmap(cm, annot=True, cmap=\"Blues\", fmt=\"d\", cbar=False)\n","    plt.title(\"Confusion Matrix\")\n","    plt.xlabel(\"Predicted\")\n","    plt.ylabel(\"True\")\n","    plt.show()\n","\n","# Plotting the Precision-Recall Curve\n","def plot_precision_recall_curve(y_true, y_pred):\n","    precision, recall, _ = precision_recall_curve(y_true, y_pred)\n","    plt.figure(figsize=(8, 6))\n","    plt.plot(recall, precision, color='b')\n","    plt.fill_between(recall, precision, color='b', alpha=0.2)\n","    plt.xlabel('Recall')\n","    plt.ylabel('Precision')\n","    plt.title('Precision-Recall Curve')\n","    plt.show()\n","\n","# Generate the plots\n","plot_confusion_matrix(y_test, y_pred)\n","plot_precision_recall_curve(y_test, y_pred)\n"]}],"metadata":{"colab":{"provenance":[],"mount_file_id":"1cb0XKuSWqnWy6RTgJiiJ1kZ209A8YvNg","authorship_tag":"ABX9TyO/Ig2l9nYnLXLLpJj1eZnb"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}